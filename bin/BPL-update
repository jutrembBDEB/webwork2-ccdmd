#!/usr/bin/env perl

# It is used to update
# the database when it comes to the WeBWorK Open Problem Library (BPL).
# This should be run after doing a git clone or pull for the BPL
# files.

# In order for this script to work:
#   1) The BPL downloaded to your machine (the .pg files)
#   2) The environment variable WEBWORK_ROOT needs to be 
#      correctly defined (as with other scripts here).
#   3) Configuration for the BPL in site.conf needs to be
#      done (basically just setting the path to the BPL files).

#use strict;
use File::Find;
use File::Find::Rule;
use File::Basename;
use Cwd;
use DBI;
use Data::Dumper;


 #(maximum varchar length is 255 for mysql version < 5.0.3.  
 #You can increase path length to  4096 for mysql > 5.0.3)

BEGIN {
        die "WEBWORK_ROOT not found in environment.\n"
                unless exists $ENV{WEBWORK_ROOT};
	# Unused variable, but define it to avoid an error message.
	$WeBWorK::Constants::WEBWORK_DIRECTORY = '';
}

# Taxonomy global variables
# Make a hash of hashes of hashes to record what is legal
# Also create list for json file
my $taxo={};
#my $taxsubs = [];


### Data for creating the database tables

my %BPLtables = (
 dbsubject => 'BPL_DBsubject',
 dbchapter => 'BPL_DBchapter',
 dbsection => 'BPL_DBsection',
 author => 'BPL_author',
 path => 'BPL_path',
 pgfile => 'BPL_pgfile',
 keyword => 'BPL_keyword',
 pgfile_keyword => 'BPL_pgfile_keyword',
 keywordmap => 'BPL_keyword_chapters',
 keyworddim => 'BPL_keyword_dim',
 keywordrank => 'BPL_keyword_rank',
 textbook => 'BPL_textbook',
 chapter => 'BPL_chapter',
 section => 'BPL_section',
 problem => 'BPL_problem',
 morelt => 'BPL_morelt',
 pgfile_problem => 'BPL_pgfile_problem',
);


# Get database connection

use lib "$ENV{WEBWORK_ROOT}/lib";
use lib "$ENV{WEBWORK_ROOT}/bin";
use WeBWorK::CourseEnvironment;
use WeBWorK::Utils::Tags;

my $ce = new WeBWorK::CourseEnvironment({webwork_dir=>$ENV{WEBWORK_ROOT}});

# decide whether the mysql installation can handle 
# utf8mb4 and that should be used for the BPL

my $ENABLE_UTF8MB4 = ($ce->{ENABLE_UTF8MB4})?1:0;
print  "using utf8mb4 \n\n" if $ENABLE_UTF8MB4;

my $dbh = DBI->connect(
        $ce->{problemLibrary_db}->{dbsource},
        $ce->{problemLibrary_db}->{user},
        $ce->{problemLibrary_db}->{passwd},
        {
                PrintError => 0,
                RaiseError => 1,
                ($ENABLE_UTF8MB4)?(mysql_enable_utf8mb4 =>1):(mysql_enable_utf8 => 1),
        },
);

my $character_set='';
$character_set=($ENABLE_UTF8MB4)?"utf8mb4":"utf8";
$dbh->prepare("SET NAMES '$character_set'")->execute();

print "using character set $character_set to build BPL database\n";

my $libraryRoot = $ce->{problemLibrary}->{BPLroot};
$libraryRoot =~ s|/+$||;
print "using libraryRoot $libraryRoot\n";
print "WEBWORK_ROOT $ENV{WEBWORK_ROOT}\n";
my $db_storage_engine = $ce->{problemLibrary_db}->{storage_engine};

my $verbose = 0;
my $cnt2 = 0;
# Can force library version
$libraryVersion = $ARGV[0] if(@ARGV);

# auto flush printing
my $old_fh = select(STDOUT);
$| = 1;
select($old_fh);

sub dbug {
	my $msg = shift;
	my $insignificance = shift || 2;
	print $msg if($verbose>=$insignificance);
}

##Figure out which set of tables to use

my %tables;
=comment
if($libraryVersion >= 2) {
	%tables = %OPLtables;
	my $lib = 'OPL';
	warn "Library version is $libraryVersion; using OPLtables!\n";
} else {
	%tables = %NPLtables;
	my $lib = 'NPL';
	print "Library version is $libraryVersion; NPLtables! \n";
}
=cut
%tables = %BPLtables;
my $lib = 'BPL';

@create_tables = (
[$tables{dbsubject}, '
	DBsubject_id int(15) NOT NULL auto_increment,
	name varchar(245) NOT NULL,
	KEY DBsubject (name),
	PRIMARY KEY (DBsubject_id)
'],
[$tables{dbchapter}, '
	DBchapter_id int(15) NOT NULL auto_increment,
	name varchar(245) NOT NULL,
	DBsubject_id int(15) DEFAULT 0 NOT NULL,
	KEY DBchapter (name),
	KEY (DBsubject_id),
	PRIMARY KEY (DBchapter_id)
'],
[$tables{dbsection}, '
        DBsection_id int(15) NOT NULL auto_increment,
        name varchar(245) NOT NULL,
        DBchapter_id int(15) DEFAULT 0 NOT NULL,
        KEY DBsection (name),
        KEY (DBchapter_id),
        PRIMARY KEY (DBsection_id)
'],
[$tables{path}, '
	path_id int(15) NOT NULL auto_increment,
	path varchar(245) NOT NULL,
	machine varchar(255),
	user varchar(255),
	KEY (path),
	PRIMARY KEY (path_id)
'],
[$tables{pgfile}, '
	pgfile_id int(15) NOT NULL auto_increment,
	DBsection_id int(15) NOT NULL,
	author_id int(15),
	institution tinyblob,
	path_id int(15) NOT NULL,
	filename varchar(255) NOT NULL,
	morelt_id int(127) DEFAULT 0 NOT NULL,
	level int(15),
	language varchar(255),
	static TINYINT,
	MO TINYINT,
	PRIMARY KEY (pgfile_id)
'],
[$tables{keyword}, '
	keyword_id int(15) NOT NULL auto_increment,
	keyword varchar(245) NOT NULL,
	KEY (keyword),
	PRIMARY KEY (keyword_id)
'],
[$tables{keywordrank}, '
	keyword_id int(15) NOT NULL auto_increment,
	kwrank int(15) NOT NULL,
	PRIMARY KEY (keyword_id)
'],
[$tables{keywordmap}, '
	id int(15) NOT NULL auto_increment,
	bplkeyword_id int(11) NOT NULL,
	bpldbchapter_id int(11) NOT NULL,
	KEY (bplkeyword_id,bpldbchapter_id),
	PRIMARY KEY (id)
'],
[$tables{keyworddim}, '
	keyword_id int(15) NOT NULL,
	keyword varchar(245) NOT NULL,
	DBchapter_id int(11) NOT NULL,
	chapter varchar(245) NOT NULL,
	DBsubject_id int(11) NOT NULL,
	subject varchar(245) NOT NULL,
	pgfile_id int(15) NOT NULL,
	KEY (chapter),
	KEY (subject),
	KEY (keyword,pgfile_id)
'],
[$tables{pgfile_keyword}, '
	pgfile_id int(15) DEFAULT 0 NOT NULL,
	keyword_id int(15) DEFAULT 0 NOT NULL,
	KEY pgfile_keyword (keyword_id, pgfile_id),
	KEY pgfile (pgfile_id)
']);

### End of database data

## Resetting the database tables.
#  First take care of tables which are no longer used

for my $tableinfo (@create_tables) {
	my $tabname = $tableinfo->[0];
	my $tabinit = $tableinfo->[1];
	my $query = "DROP TABLE IF EXISTS `$tabname`";
	$dbh->do($query);
	$query = "CREATE TABLE `$tabname` ( $tabinit ) ENGINE=$db_storage_engine CHARACTER SET $character_set";
	$dbh->do($query);
}


print "Mysql database reinitialized.\n";

File::Find::find({ wanted => \&pgfiles, follow_fast=> 1}, $libraryRoot);
sub safe_get_id {
        my $tablename = shift;
        my $idname = shift;
        my $whereclause = shift;
        my $wherevalues = shift;
        my $addifnew = shift;
        my @insertvalues = @_;
#print "\nCalled with $tablename, $idname, $whereclause, [".join(',', @$wherevalues)."], (".join(',', @insertvalues).")\n" if($tablename eq 'BPL_keyword');
	for my $j (0..$#insertvalues) {
		$insertvalues[$j] =~ s/"/\\\"/g;
	}
	
        my $query = "SELECT $idname FROM `$tablename` ".$whereclause ;
        my $sth = $dbh->prepare($query);
        $sth->execute(@$wherevalues);
        my $idvalue, @row;
        unless(@row = $sth->fetchrow_array()) {
                return 0 unless $addifnew;
                for my $j (0..$#insertvalues) {
                        #print "Looking at ".$insertvalues[$j]."\n";
                        if ($insertvalues[$j] ne "") {
                                $insertvalues[$j] = '"'.$insertvalues[$j].'"';
                        } else {
                                $insertvalues[$j] = NULL;
                        }
                }
                #print "INSERT INTO $tablename VALUES( ".join(',',@insertvalues).")\n";
                $dbh->do("INSERT INTO `$tablename` VALUES(". join(',',@insertvalues) .")");
                dbug "INSERT INTO $tablename VALUES( ".join(',',@insertvalues).")\n";
                $sth = $dbh->prepare($query);
                $sth->execute(@$wherevalues);
                @row = $sth->fetchrow_array();
        }
        $idvalue = $row[0];
        return($idvalue);
}

sub pgfiles {

        my $name = $File::Find::name;
        return if($name =~/CCDMD-EN/);
        %textinfo=();
        my @textproblems = (-1);
#print "\n$name";

        if ($name =~ /swf$/) { # Found a flash applet
                my $applet_file = basename($name);
                symlink($name,$ce->{webworkDirs}->{htdocs}."/applets/".$applet_file);
        }

        if ($name =~ /\.pg$/) {
                $pgfile = basename($name);
                $pgpath = dirname($name);
                $pgpath =~ s|^$libraryRoot/||;

                my $tags = WeBWorK::Utils::Tags->new($name);

                if(1) {

			my $subject = $tags->{DBsubject};
			my $chapter = $tags->{DBchapter};
			my $subject = $tags->{keywords};
			my $mathobj = $tags->{MO} || 0;
			my $static  = $tags->{Static} || 0;
			my $lang    = $tags->{Language} || "fr";

                        # path table
			my $path_id = safe_get_id($tables{path}, 'path_id',
					qq(WHERE path = ?), [$pgpath], 1, "", $pgpath, "", "");


			my $DBsubject_id = safe_get_id($tables{dbsubject}, 'DBsubject_id',
					qq(WHERE BINARY name = ?), [$tags->{DBsubject}], 1, "", $tags->{DBsubject});
			if(not $DBsubject_id) {
				print "\nInvalid subject '$tags->{DBsubject}' in $name\n";
				next;
			}

                        $tags->{DBchapter} =~s/\\//;
                        my $DBchapter_id = safe_get_id($tables{dbchapter}, 'DBchapter_id',
                                        qq(WHERE BINARY name = ? and DBsubject_id = ?), [$tags->{DBchapter}, $DBsubject_id], 1, "", $tags->{DBchapter}, $DBsubject_id);

                        if(not $DBchapter_id) {
                                        print "\nInvalid chapter '$tags->{DBchapter}' in $name\n";
                                        next;
                        }
                        my $DBsection_id = safe_get_id($tables{dbsection}, 'DBsection_id',
                                qq(WHERE name = ? and DBchapter_id = ?), ['Misc', $DBchapter_id], 1, "", 'Misc', $DBchapter_id);
			if(not $DBsection_id) {
				print "\nInvalid section 'Misc'\n";
				next;
			}
			my $pgfile_id = safe_get_id($tables{pgfile}, 'pgfile_id',
					qq(WHERE filename = ? AND path_id = ? AND DBsection_id = ? ), [$pgfile, $path_id, $DBsection_id], 1, "", $DBsection_id, 0, '', $path_id, $pgfile, 0, $level, $lang, $static, $mathobj);
                        foreach my $keyword (@{$tags->{keywords}}) {
                                #$keyword =~s/[\'\"]//g;
                                #$keyword =~s/[\'\"]//g;
                                $keyword = kwtidy($keyword);
                                # skip it if it is empty
                                next unless $keyword;
                                my $keyword_id = safe_get_id($tables{keyword}, 'keyword_id',
                                        qq(WHERE keyword = ?), [$keyword], 1, "", $keyword);

                                $dbh->do("INSERT INTO `$tables{keywordmap}` (bplkeyword_id,bpldbchapter_id)
                                                        VALUES(
                                                                \"$keyword_id\",
                                                                \"$DBchapter_id\"
                                                        )"
                                                                );

                                        $query = "SELECT pgfile_id FROM `$tables{pgfile_keyword}` WHERE keyword_id = \"$keyword_id\" and pgfile_id=\"$pgfile_id\"";
                                        my $ok = $dbh->selectrow_array($query);
                                        if (!defined($ok)) {
                                                $dbh->do("INSERT INTO `$tables{pgfile_keyword}`
                                                        VALUES(
                                                                \"$pgfile_id\",
                                                                \"$keyword_id\"
                                                        )"
                                                                );
                                                dbug "INSERT INTO pgfile_keyword VALUES( \"$pgfile_id\", \"$keyword_id\" )\n";
                                        }
                        }

                }


        }


}


sub trim {
	my $str = shift;
	$str =~ s/^\s+//;
	$str =~ s/\s+$//;
	return $str;
}

sub kwtidy {
	my $s = shift;
	#$s =~ s/\W//g;
	$s =~ s/_//g;
	$s =~ s/\\//g;
	$s =~ s/^\s+//;
	$s =~ s/\s+$//;
	$s =~ s/^\'//g;
	$s =~ s/\'$//g;
	#$s = lc($s);
	return($s);
}

sub keywordcleaner {
	my $string = shift;
	my @spl1 = split /,/, $string;
	my @spl2 = map(kwtidy($_), @spl1);
	return(@spl2);
}

# Save on passing these values around
my %textinfo;

# Initialize, if needed more text-info information;
sub maybenewtext {
	my $textno = shift;
	return if defined($textinfo{$textno});
	# So, not defined yet
	$textinfo{$textno} = { title => '', author =>'', edition =>'',
						   section => '', chapter =>'', problems => [] };
}

print "\nCreating master table for all keywords,subject,chapter,pgfile...\n";
$dbh->do("INSERT INTO BPL_keyword_dim select distinct k.keyword_id,k.keyword,c.DBchapter_id,c.name as chapter,s.DBsubject_id,s.name as subject,pg.pgfile_id from BPL_keyword_chapters kc, BPL_keyword k, BPL_DBchapter c, BPL_DBsubject s, BPL_pgfile_keyword pg where kc.bplkeyword_id = k.keyword_id and c.DBchapter_id = kc.bpldbchapter_id and pg.keyword_id = k.keyword_id and s.DBsubject_id = c.DBsubject_id");
$dbh->do("INSERT INTO BPL_keyword_rank select keyword_id,count(distinct pgfile_id) as kwrank from BPL_pgfile_keyword GROUP BY keyword_id");

if ($ce->{problemLibrary}{showLibraryLocalStats} ||
    $ce->{problemLibrary}{showLibraryGlobalStats}) {
  print "\nUpdating Library Statistics.\n";
  do $ENV{WEBWORK_ROOT}.'/bin/update-BPL-statistics';
}

$dbh->disconnect;
print "\nDone.\n";
